from scapy.all import sniff
from scapy.layers.inet import IP, TCP, UDP, ICMP

# Function to process each captured packet
def process_packet(packet):
    if IP in packet:
        ip_layer = packet[IP]
        
        # Display packet details
        print(f"\nPacket Captured: {packet.summary()}")
        print(f"Source IP: {ip_layer.src}")
        print(f"Destination IP: {ip_layer.dst}")
        print(f"Protocol: {ip_layer.proto}")

        # Analyze the transport layer
        if TCP in packet:
            tcp_layer = packet[TCP]
            print(f"--- TCP Packet ---")
            print(f"Source Port: {tcp_layer.sport}")
            print(f"Destination Port: {tcp_layer.dport}")
            if len(tcp_layer.payload) > 0:
                print(f"Payload Data: {str(tcp_layer.payload)}")

        elif UDP in packet:
            udp_layer = packet[UDP]
            print(f"--- UDP Packet ---")
            print(f"Source Port: {udp_layer.sport}")
            print(f"Destination Port: {udp_layer.dport}")
            if len(udp_layer.payload) > 0:
                print(f"Payload Data: {str(udp_layer.payload)}")

        elif ICMP in packet:
            print(f"--- ICMP Packet ---")
            print(f"Type: {packet[ICMP].type}")
            print(f"Code: {packet[ICMP].code}")
            
# Sniffer function to capture packets on a specified interface
def start_sniffer(interface=None):
    print("Starting packet sniffer...")
    sniff(iface=interface, prn=process_packet, store=False)

if __name__ == "__main__":
    # Start capturing packets (specify the network interface if needed, e.g., 'eth0')
    start_sniffer()
